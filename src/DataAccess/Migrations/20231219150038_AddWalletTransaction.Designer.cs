// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AlifDbContext))]
    [Migration("20231219150038_AddWalletTransaction")]
    partial class AddWalletTransaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.DbClient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.Property<string>("WalletId")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id");

                    b.HasIndex("WalletId")
                        .IsUnique();

                    b.ToTable("clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4f2e5dd4-f012-4f44-b0ee-9cc924610476",
                            Name = "First Client",
                            WalletId = "524c1940-3df9-4332-8041-d560e285aff2"
                        },
                        new
                        {
                            Id = "de9cddb0-5673-4616-8019-04de8673af1b",
                            Name = "Second Client",
                            WalletId = "1ef8c2da-4ac1-461b-a205-603fa8fd88cf"
                        });
                });

            modelBuilder.Entity("DataAccess.DbWallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("balance");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("wallets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "524c1940-3df9-4332-8041-d560e285aff2",
                            Balance = 4047m,
                            Status = 0
                        },
                        new
                        {
                            Id = "1ef8c2da-4ac1-461b-a205-603fa8fd88cf",
                            Balance = 4047m,
                            Status = 1
                        });
                });

            modelBuilder.Entity("DataAccess.DbWalletTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("VARCHAR")
                        .HasColumnName("id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("quantity");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<DateTime>("TimeOfTransacition")
                        .HasColumnType("DATE")
                        .HasColumnName("time_of_transacition");

                    b.Property<string>("WalletId")
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("wallets_transactions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "443112df-5112-493b-b863-6029245de36e",
                            Quantity = 2023m,
                            Status = 1,
                            TimeOfTransacition = new DateTime(2023, 11, 19, 20, 0, 38, 749, DateTimeKind.Local).AddTicks(4512),
                            WalletId = "524c1940-3df9-4332-8041-d560e285aff2"
                        },
                        new
                        {
                            Id = "0d12654d-dd56-47c6-8001-35c781d59d55",
                            Quantity = 2024m,
                            Status = 1,
                            TimeOfTransacition = new DateTime(2023, 12, 19, 20, 0, 38, 749, DateTimeKind.Local).AddTicks(4540),
                            WalletId = "524c1940-3df9-4332-8041-d560e285aff2"
                        },
                        new
                        {
                            Id = "a048a76f-c935-41d6-a76a-802b463bd5ce",
                            Quantity = 12000m,
                            Status = 0,
                            TimeOfTransacition = new DateTime(2023, 12, 19, 20, 0, 38, 749, DateTimeKind.Local).AddTicks(4543),
                            WalletId = "524c1940-3df9-4332-8041-d560e285aff2"
                        },
                        new
                        {
                            Id = "b15e419f-9402-4714-8b13-584387db7b70",
                            Quantity = 2023m,
                            Status = 1,
                            TimeOfTransacition = new DateTime(2023, 11, 19, 20, 0, 38, 749, DateTimeKind.Local).AddTicks(4545),
                            WalletId = "1ef8c2da-4ac1-461b-a205-603fa8fd88cf"
                        },
                        new
                        {
                            Id = "ff5fbe30-a4aa-4e85-8919-1c76a6ded6ce",
                            Quantity = 2024m,
                            Status = 1,
                            TimeOfTransacition = new DateTime(2023, 12, 19, 20, 0, 38, 749, DateTimeKind.Local).AddTicks(4548),
                            WalletId = "1ef8c2da-4ac1-461b-a205-603fa8fd88cf"
                        },
                        new
                        {
                            Id = "9be32e58-8e3c-40d7-be0a-bb155d20e570",
                            Quantity = 120000m,
                            Status = 0,
                            TimeOfTransacition = new DateTime(2023, 12, 19, 20, 0, 38, 749, DateTimeKind.Local).AddTicks(4550),
                            WalletId = "1ef8c2da-4ac1-461b-a205-603fa8fd88cf"
                        });
                });

            modelBuilder.Entity("DataAccess.DbClient", b =>
                {
                    b.HasOne("DataAccess.DbWallet", "Wallet")
                        .WithOne("Client")
                        .HasForeignKey("DataAccess.DbClient", "WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("DataAccess.DbWalletTransaction", b =>
                {
                    b.HasOne("DataAccess.DbWallet", "Wallet")
                        .WithMany("WalletTrancations")
                        .HasForeignKey("WalletId");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("DataAccess.DbWallet", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("WalletTrancations");
                });
#pragma warning restore 612, 618
        }
    }
}
